import org.jetbrains.kotlin.konan.target.HostManager

plugins {
  alias(libs.plugins.kotlin.jvm)
  alias(libs.plugins.shadow) apply false
  alias(libs.plugins.publish)
  alias(libs.plugins.dokka)
  id("java-gradle-plugin")
  id("jvm-test-suite")
}

testing {
  suites {
    dockerTest(JvmTestSuite) {
      useJUnit()
    }
  }
}

configurations.dockerTestImplementation.extendsFrom(configurations.testImplementation)

gradlePlugin {
  plugins {
    sqlDelight {
      id = 'org.danbrough.sqldelight'
      implementationClass = 'app.cash.sqldelight.gradle.SqlDelightPlugin'
    }
  }

  testSourceSets(sourceSets.test, sourceSets.dockerTest)
}

configurations {
  bundled
  shade
}

dependencies {
  api(libs.sqlPsi) {
    exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib-jdk8'
  }

  implementation libs.sqliteJdbc
  implementation libs.objectDiff
  implementation libs.schemaCrawler.tools
  implementation libs.schemaCrawler.sqlite

  shade project(':sqlite-migrations')
  shade project(':sqldelight-compiler')
  shade libs.intellij.analysis
  shade libs.intellij.core
  shade libs.intellij.java
  shade libs.intellij.lang
  shade libs.intellij.testFramework

  compileOnly gradleApi()
  implementation libs.kotlin.plugin
  compileOnly libs.android.plugin

  testImplementation libs.sqlPsi
  testImplementation project(':sqlite-migrations')
  testImplementation project(':sqldelight-compiler')
  testImplementation libs.junit
  testImplementation libs.truth
  testImplementation libs.testParameterInjector
}

tasks.named('test') {
  // The integration tests require local installations of artifacts.
  dependsOn(
      ":dialects:mysql:publishAllPublicationsToInstallLocallyRepository",
      ":dialects:hsql:publishAllPublicationsToInstallLocallyRepository",
      ":dialects:postgresql:publishAllPublicationsToInstallLocallyRepository",
      ":dialects:sqlite:json-module:publishAllPublicationsToInstallLocallyRepository",
      ":dialects:sqlite-3-18:publishAllPublicationsToInstallLocallyRepository",
      ":dialects:sqlite-3-24:publishAllPublicationsToInstallLocallyRepository",
      ":dialects:sqlite-3-25:publishAllPublicationsToInstallLocallyRepository",
      ":dialects:sqlite-3-30:publishAllPublicationsToInstallLocallyRepository",
      ":dialects:sqlite-3-35:publishAllPublicationsToInstallLocallyRepository",
      ":dialects:sqlite-3-38:publishAllPublicationsToInstallLocallyRepository",
      ":sqldelight-compiler:dialect:publishAllPublicationsToInstallLocallyRepository",
      ":runtime:publishKotlinMultiplatformPublicationToInstallLocallyRepository",
      ":runtime:publishJvmPublicationToInstallLocallyRepository",
      ":runtime:publishJsPublicationToInstallLocallyRepository",
      ":drivers:android-driver:publishAllPublicationsToInstallLocallyRepository",
      ":drivers:sqlite-driver:publishAllPublicationsToInstallLocallyRepository",
      ":drivers:jdbc-driver:publishAllPublicationsToInstallLocallyRepository",
      ":sqlite-migrations:publishAllPublicationsToInstallLocallyRepository",
      ":sqldelight-compiler:publishAllPublicationsToInstallLocallyRepository",
      ":sqldelight-gradle-plugin:publishAllPublicationsToInstallLocallyRepository",
  )
  if (HostManager.hostIsMac) {
    dependsOn(
        ":drivers:native-driver:publishIosX64PublicationToInstallLocallyRepository",
        ":drivers:native-driver:publishIosSimulatorArm64PublicationToInstallLocallyRepository",
        ":drivers:native-driver:publishKotlinMultiplatformPublicationToInstallLocallyRepository",
        ":runtime:publishIosX64PublicationToInstallLocallyRepository",
        ":runtime:publishIosSimulatorArm64PublicationToInstallLocallyRepository",
        ":runtime:publishIosArm64PublicationToInstallLocallyRepository",
    )
  }
  useJUnit {
    if (project.hasProperty("Instrumentation")) {
      includeCategories 'app.cash.sqldelight.Instrumentation'
    } else {
      excludeCategories 'app.cash.sqldelight.Instrumentation'
    }
  }
}

tasks.named('check') {
  dependsOn(testing.suites.dockerTest)
}

tasks.named('dockerTest') {
  if (project.hasProperty("Instrumentation")) enabled = false
  dependsOn(
      ":dialects:mysql:publishAllPublicationsToInstallLocallyRepository",
      ":dialects:postgresql:publishAllPublicationsToInstallLocallyRepository",
      ":sqldelight-compiler:dialect:publishAllPublicationsToInstallLocallyRepository",
      ":runtime:publishKotlinMultiplatformPublicationToInstallLocallyRepository",
      ":runtime:publishJvmPublicationToInstallLocallyRepository",
      ":drivers:jdbc-driver:publishAllPublicationsToInstallLocallyRepository",
      ":sqlite-migrations:publishAllPublicationsToInstallLocallyRepository",
      ":sqldelight-compiler:publishAllPublicationsToInstallLocallyRepository",
      ":sqldelight-gradle-plugin:publishAllPublicationsToInstallLocallyRepository",
      ":drivers:r2dbc-driver:publishAllPublicationsToInstallLocallyRepository",
      ":extensions:async-extensions:publishAllPublicationsToInstallLocallyRepository",
  )
}

tasks.named('validatePlugins') {
  enableStricterValidation = true
}

if (System.getenv("CI") == "true") {
  apply plugin: 'com.github.johnrengelman.shadow'

  configurations.compileOnly.extendsFrom(configurations.shade)

  tasks.named("shadowJar") {
    archiveClassifier.set("")
    minimize()
    configurations = [project.configurations.shade]

    include '*.jar'
    include '**/*.class'
    include 'META-INF/gradle-plugins/*'
    include 'messages/*.properties'

    exclude '/groovy**'
    exclude '/kotlin/**'
  }

  artifacts {
    runtimeOnly(tasks.named('shadowJar'))
    archives(tasks.named('shadowJar'))
  }
} else {
  configurations.implementation.extendsFrom(configurations.shade)
}

apply from: "$rootDir/gradle/gradle-mvn-push.gradle"
