import org.jetbrains.kotlin.konan.target.HostManager

plugins {
  alias(deps.plugins.kotlin.multiplatform)
  alias(deps.plugins.publish)
  alias(deps.plugins.dokka)
}

def ideaActive = System.getProperty("idea.active") == "true"

kotlin {
  iosX64()
  iosArm32()
  iosArm64()
  tvosX64()
  tvosArm64()
  watchosX86()
  watchosX64()
  watchosArm32()
  watchosArm64()
  macosX64()
  mingwX86()
  mingwX64()
  linuxX64()
  linuxArm64()
  linuxArm32Hfp()
  androidNativeArm32()
  androidNativeArm64()
  androidNativeX86()
  androidNativeX64()
  macosArm64()
  iosSimulatorArm64()
  watchosSimulatorArm64()
  tvosSimulatorArm64()

  sourceSets {
    commonMain {
      dependencies {
        api project (':runtime')
      }
    }
    commonTest {
      dependencies {
        implementation deps.kotlin.test.common
        implementation deps.testhelp
      }
    }
    nativeMain {
      dependsOn(commonMain)
      dependencies {
        api deps.sqliter
      }
    }
    nativeTest {
      dependsOn(commonTest)
      dependencies {
        implementation project(':drivers:driver-test')
      }
    }
    nativeLinuxLikeMain {
      dependsOn(nativeMain)
    }
    nativeDarwinMain{
      dependsOn(nativeLinuxLikeMain)
    }
    mingwMain{
      dependsOn(nativeMain)
    }
    mingwX86Main{
      dependsOn(mingwMain)
    }
    mingwX64Main{
      dependsOn(mingwMain)
    }
    linuxMain{
      dependsOn(nativeLinuxLikeMain)
    }
  }

  configure([targets.iosX64, targets.iosArm32, targets.iosArm64, targets.tvosX64, targets.tvosArm64, targets.watchosX86, targets.watchosX64, targets.watchosArm32, targets.watchosArm64, targets.macosX64, targets.macosArm64, targets.iosSimulatorArm64, targets.watchosSimulatorArm64, targets.tvosSimulatorArm64]) {
    sourceSets.getByName("${name}Main").dependsOn(sourceSets.nativeDarwinMain)
    sourceSets.getByName("${name}Test").dependsOn(sourceSets.nativeTest)
    compilations.test {
      kotlinOptions.freeCompilerArgs += ["-linker-options", "-lsqlite3"]
    }
  }

  configure([targets.linuxX64]) {
    sourceSets.getByName("${name}Main").dependsOn(sourceSets.linuxMain)
    sourceSets.getByName("${name}Test").dependsOn(sourceSets.nativeTest)
    compilations.test {
      kotlinOptions.freeCompilerArgs += ["-linker-options", "-lsqlite3 " +
              " -L./build/kotlinxtras/sqlite/linuxX64/lib" +
              " -L/usr/local/kotlinxtras/libs/sqlite/linuxX64/lib" +
              " -L/usr/lib/x86_64-linux-gnu -L/usr/lib -L/usr/lib64"]
    }
  }

  configure([targets.linuxArm64]) {
    sourceSets.getByName("${name}Main").dependsOn(sourceSets.linuxMain)
    sourceSets.getByName("${name}Test").dependsOn(sourceSets.nativeTest)
    compilations.test {
      kotlinOptions.freeCompilerArgs += ["-linker-options", "-lsqlite3 " +
              " -L./build/kotlinxtras/sqlite/linuxArm64/lib" +
                                         " -L/usr/local/kotlinxtras/libs/sqlite/linuxArm64/lib" +
                                         " -L/usr/lib/x86_64-linux-gnu -L/usr/lib -L/usr/lib64"]
    }
  }

  configure([targets.linuxArm32Hfp]) {
    sourceSets.getByName("${name}Main").dependsOn(sourceSets.linuxMain)
    sourceSets.getByName("${name}Test").dependsOn(sourceSets.nativeTest)
    compilations.test {
      kotlinOptions.freeCompilerArgs += ["-linker-options", "-lsqlite3 " +
              " -L./build/kotlinxtras/sqlite/linuxArm32Hfp/lib" +
                                         " -L/usr/local/kotlinxtras/libs/sqlite/linuxArm32Hfp/lib" +
                                         " -L/usr/lib/x86_64-linux-gnu -L/usr/lib -L/usr/lib64"]
    }
  }

  configure([targets.mingwX64]) {
    sourceSets.getByName("${name}Main").dependsOn(sourceSets.mingwMain)
    sourceSets.getByName("${name}Test").dependsOn(sourceSets.nativeTest)
    compilations.test {
      kotlinOptions.freeCompilerArgs += ["-linker-options", "-Lc:\\msys64\\mingw64\\lib -L$rootDir\\libs -lsqlite3".toString()]
    }
  }

  configure([targets.mingwX86]) {
    sourceSets.getByName("${name}Main").dependsOn(sourceSets.mingwMain)
    sourceSets.getByName("${name}Test").dependsOn(sourceSets.nativeTest)
    compilations.test {
      kotlinOptions.freeCompilerArgs += ["-linker-options", "-Lc:\\msys32\\mingw32\\lib -L$rootDir\\libs -lsqlite3".toString()]
    }
  }

  //linking fails for the linux test build if not built on a linux host
  //ensure the tests and linking for them is only done on linux hosts
  if(!HostManager.hostIsLinux) {
    tasks.findByName("linuxX64Test")?.enabled = false
    tasks.findByName("linkDebugTestLinuxX64")?.enabled = false
  }

  if(!HostManager.hostIsMingw) {
    tasks.findByName("mingwX64Test")?.enabled = false
    tasks.findByName("linkDebugTestMingwX64")?.enabled = false
  }
}

apply from: "$rootDir/gradle/gradle-mvn-push.gradle"
